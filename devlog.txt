National Swag Agency
Nora Miller
Sophia Eiden
Ameer Alnasser
pd 6
---------------------
 Chess
Create a terminal-based chess game taking in inputs in a two player game

/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow we so BOSS bc...
we were able to only make the pawn move up 2 in the first move, adding a _justMoved boolean to do so. We made castling work as well

We originally struggled with pawns going diagonal and en passant, but got that working too

We have a board that reads in inputs!

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
blah blah pesky bug...
We were unable to connect processing and java together. We expected the transition to be a lot easier than it actually is

There is some funkiness with the Queen and we were unable to discover why there were some impossible moves.

We could not use regular chess notation to take in inputs, so we resorted to using ints


COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
We relearned how parsing Ints worked, and how we could use that to make it more location based

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we changed our project to be terminal-based due to a lapse of judgement while designing our plan of attack. We should have been more well-versed in processing before biting

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Don't bite what you can't chew:: in relation to trying to use a terminal-based project as basis for a processing

getting an MVP that compiles is key. We did not try to do this to debug our code until too late.

Facilitate advice from other groups, there is no reason to be secretive or private about goals

||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================
2022-05-25 1h
--------------------------------------------------------------
Group agreed upon idea to make chess, completed deliverables for the day. Ameer found the devlog from the closet.
==============================================================

2022-05-26 2h
--------------------------------------------------------------
Group agreed upon idea to make chess, Ameer drove the making of the proposal, using his 1st semester's final project proposal as an outline
==============================================================

2022-05-26 .5h
--------------------------------------------------------------
Deliverables pushed onto repo
==============================================================
2022-05-30 2.8h
--------------------------------------------------------------
Sophia and Nora completed UML diagram; started state transitions.
==============================================================
2022-05-31 2h
--------------------------------------------------------------
Nora drove the making of the state diagrams, facilitating input from Sophia and Ameer as to how the flow should work for our program.
==============================================================
2022-06-01 .5h
--------------------------------------------------------------
Ameer worked on deliverables for the day
==============================================================

2022-06-05 3.2h
--------------------------------------------------------------
Nora, Ameer and Sophia:
 - wrote and ran toString() for Board and ran all classes
 - (but in doing so removed all uses of board in Piece instances,
    including in the constructor)
 - updated the Board constructor to start at initial positions
 - wrote checkMove methods for Pawn and Rook
==============================================================

2022-06-06 0.6h
--------------------------------------------------------------
Nora, Ameer and Sophia:
 - wrote the beginnings of the checkMove() function for bishops, in such a way
   that it can be reused for rook and for queen (we are now iterating through
   arrays of the smallest possible incremental move until we hit a boundary or
   another piece)
==============================================================

2022-06-06 1h
--------------------------------------------------------------
Nora, Ameer and Sophia:
 - decided to have the functions in Piece take Board as a parameter, to avoid
   the issue of Boards containing Pieces and Pieces containing Boards.
 - fixed and compiled Bishop checkMoves()
==============================================================

2022-06-09 5h
--------------------------------------------------------------
Nora (facilitating input from her team):
 - finished writing the turn function, with the exception of
    - the different cases of
 - fixed an implementation in which we were creating nothing pieces so the toString
   would work
 - made white pieces show up yellow and black pieces show up blue so the user can
   distinguish them
 - split off setting up the board from creating the board, so checkMoves could be
   tested with a relatively sparse board
 - ran and corrected checkMoves functions for Rook, Bishop, Queen, Knight, and Pawn
 - wrote, ran, and corrected checkDanger function, and moved it to Board class so
   it can more easily be accessed by the king's checkMoves function
(notes to self while programming)
    - finish the different cases of actually moving Pieces
    - if time allows, actually directly check rook and queen checkmoves

2022-06-12 3 h
Ameer:
  - more debugging on our end. We recognized that
  en passant doesnt work
   if you check with a piece that can be eaten, itll be chekcmate if the kign has no moves.
  Also the king can move into danger
  castling

  we need to check
  king moves check
  promotions
  castling
  en passant

Sophia:
 - fixing cosmetic issues, making it preety.
 king cannot move and eat its threatener
==============================================================
